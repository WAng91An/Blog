package ${package}.tag.${model};

import java.io.IOException;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletContext;

import org.springframework.context.ApplicationContext;
import org.springframework.stereotype.Component;
import org.springframework.web.context.ServletContextAware;
import org.springframework.web.context.support.WebApplicationContextUtils;

import com.github.pagehelper.PageInfo;
import ${package}.pojo.${beanModel};
import ${package}.vo.${beanModel}Vo;
import ${package}.service.${model}.${beanModel}ServiceImpl;
import ${package}.service.${model}.I${beanModel}Service;
import ${package}.tag.TmTemplateDirectiveModelUtil;
import ${package}.util.TmStringUtils;
import ${package}.vo.ServerResponse;

import freemarker.core.Environment;
import freemarker.ext.beans.BeansWrapper;
import freemarker.ext.beans.BeansWrapperBuilder;
import freemarker.template.Configuration;
import freemarker.template.TemplateDirectiveBody;
import freemarker.template.TemplateDirectiveModel;
import freemarker.template.TemplateException;
import freemarker.template.TemplateModel;

/**
 *${description}
 *${beanModel}ListTag
  *  创建人:${author}
  *  时间：${datetime}
 * @version 1.0.0
 *
 */
@Component("${model}List")
public class ${beanModel}ListTag implements TemplateDirectiveModel, ServletContextAware {
	private ServletContext servletContext;

	@SuppressWarnings({ "rawtypes", "unchecked" })
	public void execute(Environment env, Map params, TemplateModel[] loopVars, TemplateDirectiveBody body)
			throws TemplateException, IOException {
		ApplicationContext applicationContext = WebApplicationContextUtils.getWebApplicationContext(servletContext);
		I${beanModel}Service ${model}Service = (I${beanModel}Service) applicationContext.getBean(${beanModel}ServiceImpl.class);
		String var = TmTemplateDirectiveModelUtil.getString("var", params);
		Integer pageNo = TmTemplateDirectiveModelUtil.getInteger("pageNo", params);
		Integer pageSize = TmTemplateDirectiveModelUtil.getInteger("pageSize", params);
		String orderby = TmTemplateDirectiveModelUtil.getString("sort", params);

		if (TmStringUtils.isEmpty(var))
			var = "${model}";
		if (pageNo == null)
			pageNo = 0;
		if (pageSize == null)
			pageSize = 20;
		if (orderby == null)
			orderby = " create_time desc ";

		${beanModel}Vo ${model}Vo = new ${beanModel}Vo();
		${model}Vo.setOrderBy(orderby);
		${model}Vo.setPageNo(pageNo);
		${model}Vo.setPageSize(pageSize);

		BeansWrapper beansWrapper =  new BeansWrapperBuilder(Configuration.VERSION_2_3_28).build();
		ServerResponse serverResponse = ${model}Service.query${beanModel}All(${model}Vo);
		PageInfo<${beanModel}> pageInfo = (PageInfo<${beanModel}>) serverResponse.getData();
		List<${beanModel}> ${model}s = pageInfo.getList();
		env.setVariable(var+"_page", beansWrapper.wrap(pageInfo));
		if (body != null) {
			int i = 0;
			env.setVariable(var + "_size", beansWrapper.wrap(${model}s.size()));
			for (${beanModel} ${model} : ${model}s) {
				env.setVariable(var,beansWrapper.wrap(${model}));
				env.setVariable(var + "_index", beansWrapper.wrap(i));
				body.render(env.getOut());
				i++;
			}
		} else {
		}
	}

	@Override
	public void setServletContext(ServletContext servletContext) {
		this.servletContext = servletContext;
	}
}